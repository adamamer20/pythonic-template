name: Template Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  compute:
    runs-on: ubuntu-latest
    outputs:
      py-min: ${{ steps.out.outputs.min }}
      py-max: ${{ steps.out.outputs.max }}
      py-matrix: ${{ steps.out.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: out
        uses: ./.github/actions/compute-python

  validate-template:
    needs: compute
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.compute.outputs.py-matrix) }}
        use-docker: ['y', 'n']

    steps:
      - uses: actions/checkout@v4

      - name: Install uv & select Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install template dependencies
        run: uv sync --all-extras

      - name: Lint template files
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Generate test project
        run: |
          uv run cookiecutter . --no-input --overwrite-if-exists \
            python_version=${{ matrix.python-version }} \
            use_docker=${{ matrix.use-docker }} \
            --output-dir /tmp/test-projects

      - name: Test generated project
        working-directory: /tmp/test-projects/my-amazing-library
        run: |
          # Sync the generated project's environment (uses uv installed on the runner)
          uv sync --all-extras

          # Run linting
          uv run ruff check .
          uv run ruff format --check .

          # Run tests
          uv run pytest -v

          # Test building the package
          uv build

      - name: Test Docker build (if enabled)
        if: matrix.use-docker == 'y'
        working-directory: /tmp/test-projects/my-amazing-library
        run: |
          # Test multi-stage builds
          docker build --target builder -t test-builder .
          docker build --target runtime -t test-runtime .
          docker build --target development -t test-dev .

  test-hooks:
    needs: compute
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv & select Python (max)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ needs.compute.outputs.py-max }}

      - name: Sync environment
        run: uv sync --all-extras

      - name: Test post-generation hook
        run: |
          cd /tmp
          uv run cookiecutter ${{ github.workspace }} --no-input
          cd my-amazing-library

          # Verify git was initialized
          test -d .git

          # Verify initial commit exists
          git log --oneline | head -1

          # Verify pre-commit is configured
          test -f .pre-commit-config.yaml
