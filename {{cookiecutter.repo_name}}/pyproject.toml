[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.package_name }}"
version = "{{ cookiecutter.initial_version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" }
]
readme = "README.md"
requires-python = ">=__PY_MIN__"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
{%- if cookiecutter.license == "MIT" %}
    "License :: OSI Approved :: MIT License",
{%- elif cookiecutter.license == "Apache-2.0" %}
    "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "BSD-3-Clause" %}
    "License :: OSI Approved :: BSD License",
{%- endif %}
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
__PY_CLASSIFIERS__
]
dependencies = []

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "pre-commit>=3.6.0",
    "beartype>=0.17.0",
    "python-dotenv>=1.0.0",
    "cruft>=2.15.0",
]

{% if cookiecutter.project_type == "paper" %}[project.optional-dependencies]
paper = [
    "marimo>=0.8.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.0.0",
]{% endif %}

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"
Documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.repo_name }}/"
Repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repo_name }}/issues"

[tool.ruff]
line-length = 120
target-version = "py__PY_SHORT__"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF100", # unused noqa
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018"]

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]

[tool.pytest.ini_options]
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.version]
path = "src/{{ cookiecutter.package_name }}/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}"]

