name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: "{{ '${{ github.workflow }}-${{ github.ref }}' }}"
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  compute:
    runs-on: ubuntu-latest
    outputs:
      py-min: {{ '${{ steps.out.outputs.min }}' }}
      py-max: {{ '${{ steps.out.outputs.max }}' }}
      py-matrix: {{ '${{ steps.out.outputs.matrix }}' }}
    steps:
      - uses: actions/checkout@v4
      - id: out
        uses: ./.github/actions/compute-python

  test:
    needs: compute
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: {{ '${{ fromJson(needs.compute.outputs.py-matrix) }}' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install uv & select Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: "{{ '${{ matrix.python-version }}' }}"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Lint with ruff
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Test with pytest
        run: uv run pytest -v --cov={{ cookiecutter.package_name }} --cov-report=xml

      - name: Test with runtime type checking
        run: DEV_TYPECHECK=1 uv run pytest -v

      - name: Upload coverage to Codecov
        if: {{ '${{ matrix.python-version == needs.compute.outputs.py-max }}' }}
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  auto-merge:
    needs: test
    runs-on: ubuntu-latest
    if: |
      github.actor == 'dependabot[bot]' &&
      github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: "{{ '${{ github.event.pull_request.html_url }}' }}"
          GITHUB_TOKEN: "{{ '${{ secrets.GITHUB_TOKEN }}' }}"
